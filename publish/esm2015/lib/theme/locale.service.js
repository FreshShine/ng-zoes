import { __decorate, __param } from "tslib";
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { zh_CN, zh_TW, en_US, } from 'ng-zorro-antd/i18n';
import zhCN from './languages/zh-CN';
import { ZOE_LOCALE } from './locale.tokens';
const localeData = {
    "en-US": en_US,
    "zh-CN": zh_CN,
    "zh-TW": zh_TW,
};
let LocaleService = class LocaleService {
    constructor(i18n, locale) {
        this.i18n = i18n;
        this.change$ = new BehaviorSubject(this._locale);
        this.setLocale(locale || zhCN);
    }
    get change() {
        return this.change$.asObservable();
    }
    setLocale(locale) {
        // console.log(locale)
        if (this._locale && this._locale.abbr === locale.abbr) {
            return;
        }
        this._locale = locale;
        for (const [key, value] of Object.entries(localeData)) {
            if (locale.abbr == key) {
                console.log(value);
                this.i18n.setLocale(value);
                // this.i18n.setLocale(value);
            }
        }
        this.change$.next(locale);
    }
    get locale() {
        return this._locale;
    }
    getData(path) {
        return (this._locale[path] || {});
    }
};
LocaleService = __decorate([
    Injectable(),
    __param(1, Inject(ZOE_LOCALE))
], LocaleService);
export { LocaleService };
export function LOCALE_SERVICE_PROVIDER_FACTORY(exist, locale) {
    return exist || new LocaleService(null, locale);
}
export const LOCALE_SERVICE_PROVIDER = {
    provide: LocaleService,
    useFactory: LOCALE_SERVICE_PROVIDER_FACTORY,
    deps: [[new Optional(), new SkipSelf(), LocaleService], ZOE_LOCALE],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy16b2VzL2xpYi90aGVtZS9sb2NhbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFZLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBaUIsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RSxPQUFPLElBQUksTUFBTSxtQkFBbUIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHN0MsTUFBTSxVQUFVLEdBQUc7SUFDakIsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0NBQ2YsQ0FBQTtBQUdELElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFJeEIsWUFDVSxJQUFtQixFQUNQLE1BQTZCO1FBRHpDLFNBQUksR0FBSixJQUFJLENBQWU7UUFIckIsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFpQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFNbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQXNCO1FBQzlCLHNCQUFzQjtRQUN0QixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtZQUNyRCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyRCxJQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFDO2dCQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsOEJBQThCO2FBQy9CO1NBQ0Y7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBMEI7UUFDaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFlLENBQUM7SUFDbEQsQ0FBQztDQUNGLENBQUE7QUF0Q1ksYUFBYTtJQUR6QixVQUFVLEVBQUU7SUFPUixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQU5WLGFBQWEsQ0FzQ3pCO1NBdENZLGFBQWE7QUF3QzFCLE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxLQUFvQixFQUFFLE1BQXNCO0lBQzFGLE9BQU8sS0FBSyxJQUFJLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQWE7SUFDL0MsT0FBTyxFQUFFLGFBQWE7SUFDdEIsVUFBVSxFQUFFLCtCQUErQjtJQUMzQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUM7Q0FDcEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFByb3ZpZGVyLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IE56STE4blNlcnZpY2UsIHpoX0NOLCB6aF9UVywgZW5fVVMsIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcclxuXHJcbmltcG9ydCB6aENOIGZyb20gJy4vbGFuZ3VhZ2VzL3poLUNOJztcclxuaW1wb3J0IHsgWk9FX0xPQ0FMRSB9IGZyb20gJy4vbG9jYWxlLnRva2Vucyc7XHJcbmltcG9ydCB7IEZ1bGxMb2NhbGVEYXRhLCBMb2NhbGVEYXRhIH0gZnJvbSAnLi9sb2NhbGUudHlwZXMnO1xyXG5cclxuY29uc3QgbG9jYWxlRGF0YSA9IHtcclxuICBcImVuLVVTXCI6IGVuX1VTLFxyXG4gIFwiemgtQ05cIjogemhfQ04sXHJcbiAgXCJ6aC1UV1wiOiB6aF9UVyxcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTG9jYWxlU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBfbG9jYWxlOiBGdWxsTG9jYWxlRGF0YTtcclxuICBwcml2YXRlIGNoYW5nZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEZ1bGxMb2NhbGVEYXRhPih0aGlzLl9sb2NhbGUpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSxcclxuICAgIEBJbmplY3QoWk9FX0xPQ0FMRSkgbG9jYWxlOiBGdWxsTG9jYWxlRGF0YSB8IG51bGxcclxuICApIHtcclxuICAgIHRoaXMuc2V0TG9jYWxlKGxvY2FsZSB8fCB6aENOKTtcclxuICB9XHJcblxyXG4gIGdldCBjaGFuZ2UoKTogT2JzZXJ2YWJsZTxGdWxsTG9jYWxlRGF0YT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlJC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIHNldExvY2FsZShsb2NhbGU6IEZ1bGxMb2NhbGVEYXRhKTogdm9pZCB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhsb2NhbGUpXHJcbiAgICBpZiAodGhpcy5fbG9jYWxlICYmIHRoaXMuX2xvY2FsZS5hYmJyID09PSBsb2NhbGUuYWJicikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9sb2NhbGUgPSBsb2NhbGU7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhsb2NhbGVEYXRhKSkge1xyXG4gICAgICBpZihsb2NhbGUuYWJiciA9PSBrZXkpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKVxyXG4gICAgICAgIHRoaXMuaTE4bi5zZXRMb2NhbGUodmFsdWUpO1xyXG4gICAgICAgIC8vIHRoaXMuaTE4bi5zZXRMb2NhbGUodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNoYW5nZSQubmV4dChsb2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxvY2FsZSgpOiBGdWxsTG9jYWxlRGF0YSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShwYXRoOiBrZXlvZiBGdWxsTG9jYWxlRGF0YSk6IExvY2FsZURhdGEge1xyXG4gICAgcmV0dXJuICh0aGlzLl9sb2NhbGVbcGF0aF0gfHwge30pIGFzIExvY2FsZURhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gTE9DQUxFX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWShleGlzdDogTG9jYWxlU2VydmljZSwgbG9jYWxlOiBGdWxsTG9jYWxlRGF0YSk6IExvY2FsZVNlcnZpY2Uge1xyXG4gIHJldHVybiBleGlzdCB8fCBuZXcgTG9jYWxlU2VydmljZShudWxsLCBsb2NhbGUpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTE9DQUxFX1NFUlZJQ0VfUFJPVklERVI6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IExvY2FsZVNlcnZpY2UsXHJcbiAgdXNlRmFjdG9yeTogTE9DQUxFX1NFUlZJQ0VfUFJPVklERVJfRkFDVE9SWSxcclxuICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgTG9jYWxlU2VydmljZV0sIFpPRV9MT0NBTEVdLFxyXG59O1xyXG4iXX0=
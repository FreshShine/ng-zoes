{"./":{"url":"./","title":"文档","keywords":"","body":"NgZoe 管理后台的常用组件,依赖于ng-zorro-antd基础组件. 快速上手 安装 npm i ng-zoes 引入样式 在 styles.less 中引入样式文件 @import \"~ng-zorro-antd/ng-zorro-antd.less\"; 引入组件模块 将ZoeModule引入到你的 app.module.ts 文件 import { NgModule } from '@angular/core'; import { ZoeModule,LocaleService } from 'ng-zoes'; import { AppComponent } from './app.component'; @NgModule({ declarations: [ AppComponent ], providers: [LocaleService ], imports: [ ZoeModule ] }) export class AppModule { } Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-14 11:26:26 "},"gitbook/i18n.html":{"url":"gitbook/i18n.html","title":"国际化","keywords":"","body":"国际化 （i18n） 目前的默认文案是中文，如果需要使用其他语言，可以在初始化时进行配置，也可以在运行中随时修改，可以参考下面的方案。 全局配置 /** 配置 angular i18n **/ import { registerLocaleData } from '@angular/common'; import zh from '@angular/common/locales/zh'; registerLocaleData(zh); /** 配置国际化 **/ import {ZoeModule,ZOE_LOCALE,LocaleService,zh_CN,zh_TW,en_US,} from 'zoe'; @NgModule({ ... providers : [ LocaleService, { provide: ZOE_LOCALE, useValue: zh_CN } ] }) export class AppModule { } 运行时修改 提供了一个服务 LocaleService 用于动态修改国际化文案。 import { LocaleService,zh_TW } from 'zoe'; ... constructor(private localeService: LocaleService) { } switchLanguage() { this.localeService.setLocale(zh_TW); } 支持语言 名称 语言包名称 对应 Angular 语言包 语言包 简体中文 zh-Hans,zh-cn,zh-Hans-CN,zh zh-Hans,zh-cn,zh-Hans-CN,zh zh_CN 繁体中文 zh-Hant,zh-tw,zh-Hant-TW zh-Hant,zh-tw,zh-Hant-TW zh_TW 英语（美式） en en en_US Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-06-12 14:16:40 "},"gitbook/util.html":{"url":"gitbook/util.html","title":"工具类","keywords":"","body":"工具类 说明 类名 说明 使用 toBool 返回布尔值 toBool(value: any, defaultValue: boolean) isImageType 判断是否是图片类型 isImageType(type) isVideoType 判断是否是视频类型 isVideoType(type) getFileType 根据文件后缀判断类型 getFileType(fileName) Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-06-30 16:06:30 "},"gitbook/service.html":{"url":"gitbook/service.html","title":"公共服务","keywords":"","body":"公共服务 ComponentsService 如何使用 import { ComponentsService } from 'zoe' @Component({ selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.less'] }) export class AppComponent { constructor( private comService: ComponentsService ) { } handlePreview = (file: NzUploadFile) => { this.comService.filePreview(file) }; } 说明 服务名 说明 使用 filePreview 查看文件 this.comService.filePreview(file) LoadingService 全局loading this.loadingService.create(options:loading options) 详细说明 LoadingService - this.loadingService.create(options?:[loading options]) 加载全局loading - this.loadingService.destroy() 取消全局loading Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-17 11:18:26 "},"gitbook/components/component.html":{"url":"gitbook/components/component.html","title":"组件","keywords":"","body":"组件 已完成的组件 参数 说明 开发状态 zt 表格 已完成 zd 拖拽排序 已完成 zu 文件上传 已完成 zc 卡片 已完成 az-loading loading 开发中 实验性功能 组件名 说明 开发状态 az-chat 聊天框 待开发 zf 表单 待开发 zu 文件上传 [ 裁剪，图片转换 ] 待开发 Icon 图标 动态加载，这是为了减少包体积而提供的方式。当 NG-ZORRO 检测用户想要渲染的图标还没有静态引入时，会发起 HTTP 请求动态引入。你只需要配置 angular.json 文件: { \"assets\": [ { \"glob\": \"**/*\", \"input\": \"./node_modules/@ant-design/icons-angular/src/inline-svg/\", \"output\": \"/assets/\" } ] } Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-15 16:21:11 "},"gitbook/components/table.html":{"url":"gitbook/components/table.html","title":"zt 表格","keywords":"","body":"zt 表格 关于数据源 data 支持俩种不同获取数据源的方式，整体分为：URL和静态数据两类. 如何使用 Api 参数 说明 类型 默认值 [data] 数据数组 any[] - [pi] 当前页码 number 1 [ps] 每页数量，当设置为 0 表示不分页，默认：10 number 10 [page] 分页器配置 STPage - [total] 当前总数据，在服务器渲染时需要传入，默认：0 number 0 [columns] 列描述 any[] - [operators] table顶部操作按钮组 any[] - [bordered] 是否显示边框 boolean false (change) 变化时回调，包括：pi、ps、checkbox、radio、sort、filter、click、dblClick、expand 变动 EventEmitter - [loading] 页面是否加载中，当指定 null 由 zt 受控 boolean or null null [scroll] 横向或纵向支持滚动，也可用于指定滚动区域的宽高度：{ x: \"300px\", y: \"300px\" } { y?: string; x?: string } - STPage 参数 说明 类型 默认值 front 前端分页， true 由 st 根据 data 长度受控分页，包括：排序、过滤等；false 由用户通过 url 参数受控分页，并维护 (change) 当分页变更时重新加载数据 boolean false show 是否显示分页器，默认：true boolean true showSize 是否显示分页器中改变页数，默认：false boolean false pageSizes 分页器中每页显示条目数下拉框值，默认：[10, 20, 30, 40, 50] any[] [10, 20, 30, 40, 50] showQuickJumper 是否显示分页器中快速跳转，默认：false boolean false total 是否显示总数据量,默认模板：共 {{total}} 条 boolean false 代码演示 纯前端页面展示(前端静态数据分页) import { Component } from '@angular/core'; @Component({ selector: 'app-root', template: ` `, styleUrls: ['./app.component.less'] }) export class AppComponent { dataSet:any = []; page: any = { front: true, zeroIndexed: false, position: 'bottom', placement: 'right', show: true, showSize: true, pageSizes: [10, 20, 30, 40, 50], showQuickJumper: true, total: true, } columns: any = [ { text: '编号', index: 'code', type: 'checkbox' //'radio','checkbox','img' }, { text: '标题', index: 'note_title', click: (item, i) => console.log(item) }, { text: '内容', //特定宽度超出 文字省略(ellipsis),跨行显示(workspace) width: 200, index: 'note_content', }, ] ngOnInit(): void { for (let index = 0; index 纯前端页面展示(前端控制分页数据显示) import { Component } from '@angular/core'; @Component({ selector: 'app-root', template: ` `, styleUrls: ['./app.component.less'] }) export class AppComponent { dataSet:any = []; total:number = 50; page: any = { front: false, zeroIndexed: false, position: 'bottom', placement: 'right', show: true, showSize: true, pageSizes: [10, 20, 30, 40, 50], showQuickJumper: true, total: true, } columns: any = [ { text: '编号', index: 'code', type: 'checkbox' //'radio','checkbox','img' }, { text: '标题', index: 'note_title', click: (item, i) => console.log(item) }, { text: '内容', //特定宽度超出 文字省略(ellipsis),跨行显示(workspace) width: 200, index: 'note_content', }, ] ngOnInit(): void { for (let index = 0; index url获取数据源页面展示(api控制分页数据显示) import { Component } from '@angular/core'; @Component({ selector: 'app-root', template: ` `, styleUrls: ['./app.component.less'] }) export class AppComponent { checkBox: any = []; url: any = \"/api/seventeen/note/list\" ps = 10; //(limit) pi = 1;//(offset) req: any = { params: { //除去分页之外的参数 }, reName:{ pi: 'pageNo', ps: 'pageSize' } } page: any = { front: false, zeroIndexed: false,//后端分页是否采用`0`基索引，只在`data`类型为`string`时有效，默认：`false` position: 'bottom',//指定分页显示的位置，默认：`bottom` placement: 'right',//'left' | 'center' | 'right'; 指定分页分页方向 show: true, //是否显示分页器，默认：`true` showSize: true, //是否显示分页器中改变页数，默认：`false` pageSizes: [10, 20, 30, 40, 50], //分页器中每页显示条目数下拉框值，默认：`[10, 20, 30, 40, 50]` showQuickJumper: true, total: true, } //表格按鈕数组 operators = [ { type: 'primary', text: '新增', // hidden: this.checkBox.length, click: () => console.log(\"新增按钮\") }, { type: 'danger', text: '删除', hidden: !this.checkBox.length, //hidden不赋值相当于 hidden:false, click: () => console.log(\"删除按钮\") }, { type: 'default', text: '编辑', hidden: !this.checkBox.length, click: () => console.log(\"编辑按钮\") }, ]; //列表展示列 columns: any = [ { text: '编号', index: 'code', type: 'checkbox' //'radio','checkbox','img' }, { text: '标题', index: 'note_title', click: (item, i) => console.log(item) }, { text: '内容', //特定宽度超出 文字省略(ellipsis),跨行显示(workspace) width: 200, index: 'note_content', }, { text: 'format自定义内容', index: 'flag', render: (item, i) => { return item['flag'] ? \"是\" : \"否\"; } }, { text: '操作', width: 90, buttonType: 'link', //button or link buttons: [ { text: '查看', type: 'primary', permission: (item: any, i: string) => { if (item.status == 1) { return false; } else { return true; } }, click: (item: any, i: string) => console.log(\"查看\" + item) }, { text: '编辑', type: 'primary', click: (item: any, i: string) => console.log(\"编辑\" + item) }, { text: '删除', type: 'danger', permission: (item: any, i: string) => { if (item.status == 1) { return true; } else { return false; } }, click: (item: any, i: string) => console.log(\"删除\" + item) }, ] }, ]; ngOnInit(): void {} change(e: any) { console.log(\"反馈：\") console.log(e) if (e['type'] == \"loaded\") { if (e.loaded) { this.zt.setData(e.loaded.data.res,e.loaded.data.total) this.total = e.loaded.data.total; } } if (e['type'] == \"checkbox\" || e['type'] == 'radio') { this.checkBox = e[e['type']] this.operators = [ { type: 'primary', text: '新增', // hidden: this.checkBox.length, click: () => console.log(\"新增按钮\") }, { type: 'danger', text: '删除', hidden: !this.checkBox.length, //hidden不赋值相当于 hidden:false, click: () => console.log(\"删除按钮\") }, { type: 'default', text: '编辑', hidden: !this.checkBox.length, click: () => console.log(\"编辑按钮\") }, ]; } if (e['type'] == \"pi\" || e['type'] == \"ps\") { // this.req = { // params: { // pageNo: (e['pi']-1)*e['ps'], // pageSize: e['ps'] // } // } } } } Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-15 14:14:59 "},"gitbook/components/droppable.html":{"url":"gitbook/components/droppable.html","title":"zd 拖拽","keywords":"","body":"zd 拖拽 如何使用 Api 参数 说明 类型 默认值 [data] 数据数组 any[] - [disabled] 是否可拖拽 boolean false [renderItem] 指定 zd 挂载的 HTML 节点 HTMLElement() => HTMLElement null [zdSortChange] 拖动排序之后的回调 EventEmitter - Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-06-23 14:32:15 "},"gitbook/components/upload.html":{"url":"gitbook/components/upload.html","title":"zu 上传","keywords":"","body":"zu 上传 关于上传方式 支持 nzAction 直接上传和自定义上传 如何使用 选择文件 Api 参数 说明 类型 默认值 [nzAccept] 接受上传的文件类型, 详见 input accept Attribute string - [nzAction] 必选参数, 上传的地址 string - [nzDirectory] 支持上传文件夹（caniuse） boolean false [nzBeforeUpload] 上传文件之前的钩子，参数为上传的文件，若返回 false 则停止上传。注意：IE9 不支持该方法；注意：务必使用 => 定义处理方法。 (file: NzUploadFile, fileList: NzUploadFile[]) => boolean - [nzCustomRequest] 通过覆盖默认的上传行为，可以自定义自己的上传实现；注意：务必使用 => 定义处理方法。 (item) => Subscription - [nzData] 上传所需参数或返回上传参数的方法；注意：务必使用 => 定义处理方法。 Object - [nzDisabled] 是否禁用 boolean false [nzSort] 是否可拖动排序 boolean false [nzCompress] 是否可压缩 boolean false [nzQuality] 压缩比例 Number 0.5 [NZConvertSize] 文件大于多少才会进行压缩（字节） Number 5000 [nzFileList] 文件列表，双向绑定 NzUploadFile[] - [nzLimit] 限制单次最多上传数量，nzMultiple 打开时有效；0 表示不限 number 0 [nzSize] 限制文件大小，单位：KB；0 表示不限 number 0 [nzFileType] 限制文件类型，例如：image/png,image/jpeg,image/gif,image/bmp string - [nzFilter] 自定义过滤器 UploadFilter[] - [nzHeaders] 设置上传的请求头部，IE10 以上有效；注意：务必使用 => 定义处理方法。 Object - [nzListType] 上传列表的内建样式，支持三种基本样式 text, picture 和 picture-card 'text' ,'picture' , 'picture-card' 'text' [nzMultiple] 是否支持多选文件，ie10+ 支持。开启后按住 ctrl 可选择多个文件。 boolean false [nzName] 发到后台的文件参数名 string 'file' [nzShowUploadList] 是否展示 uploadList, 可设为一个对象，用于单独设定 showPreviewIcon，showRemoveIcon 和 showDownloadIcon boolean true [nzShowButton] 是否展示上传按钮 boolean true [nzWithCredentials] 上传请求时是否携带 cookie boolean false [nzOpenFileDialogOnClick] 点击打开文件对话框 boolean true [nzPreview] 点击文件链接或预览图标时的回调；注意：务必使用 => 定义处理方法。 (file: NzUploadFile) => void - [nzPreviewFile] 自定义文件预览逻辑；注意：务必使用 => 定义处理方法。 (file: NzUploadFile) => Observable - [nzRemove] 点击移除文件时的回调，返回值为 false 时不移除。支持返回 Observable 对象；注意：务必使用 => 定义处理方法。 (file: NzUploadFile) => boolean - (nzChange) 上传文件改变时的状态 EventEmitter - [nzDownload] 点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页 (file: NzUploadFile) => void 跳转新标签页 [nzTransformFile] 在上传之前转换文件。支持返回一个 Observable 对象 (file: NzUploadFile) => NzUploadTransformFileType - [nzIconRender] 自定义显示 icon TemplateRef - [nzFileListRender] 自定义显示整个列表 TemplateRef - nzChange 开始、上传进度、完成、失败都会调用这个函数。 文件状态改变的回调，返回为： { file: { /* ... */ }, fileList: [ /* ... */ ], event: { /* ... */ }, } file 当前操作的文件对象。 { uid: 'uid', // 文件唯一标识 name: 'xx.png' // 文件名 status: 'done', // 状态有：uploading done error removed response: '{\"status\": \"success\"}', // 服务端响应内容 linkProps: '{\"download\": \"image\"}', // 下载链接额外的 HTML 属性 } fileList 当前的文件列表。 event 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。 nzCustomRequest 默认使用HTML5方式上传（即：使用 HttpClient），允许覆盖默认行为实现定制需求，例如直接与阿里云交互等。 nzCustomRequest 回调传递以下参数： onProgress: (event: { percent: number }): void onError: (event: Error): void onSuccess: (body: Object, xhr?: Object): void data: Object filename: String file: File withCredentials: Boolean action: String headers: Object 代码演示 import { Component } from '@angular/core'; import { NzUploadFile, NzUploadChangeParam } from 'ng-zorro-antd'; import { ComponentsService } from 'zoe' @Component({ selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.less'] }) export class AppComponent { fileList: NzUploadFile[] = []; sort:boolean = false; compress:boolean =true handleChange(info: NzUploadChangeParam): void { let fileList = [...info.fileList]; console.log(info); this.fileList = fileList; } handlePreview = (file: NzUploadFile) => { this.comService.filePreview(file) }; } Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-06-30 16:27:39 "},"gitbook/components/card.html":{"url":"gitbook/components/card.html","title":"zc 卡片","keywords":"","body":"zc 卡片 如何使用 内容1 内容2 内容3 固定内容 Api 参数 说明 类型 默认值 [options] 配置 ZCOptions - [loading] loading boolean false ZCOptions 参数 说明 类型 默认值 bordered 是否边框，默认：false boolean false title 卡片title string - extra 卡片extra ZCExtra - tabs 卡片tabs ZCTabOptions - ZCExtra 参数 说明 类型 默认值 buttons buttons配置 ZCButtonOptions - type extra类型 'button' / 'text' 'text' ZCButtonOptions 参数 说明 类型 默认值 text button text string - link button link string - danger button danger boolean - diabled button diabled boolean - type button 类型 'primary' / 'default' 'default' click button click ()=>func - 代码演示 import { Component, OnInit, ViewChild, TemplateRef } from '@angular/core'; import { ZCOptions } from 'ng-zoes' @Component({ selector: 'app-root', template: ` 内容1 内容2 内容3 固定内容 `, styleUrls: ['./app.component.less'] }) export class AppComponent { @ViewChild('content1', { static: true,read: TemplateRef }) content1: TemplateRef @ViewChild('content2', { static: true,read: TemplateRef }) content2: TemplateRef @ViewChild('content3', { static: true,read: TemplateRef }) content3: TemplateRef options: ZCOptions = { bordered: true, title:'卡片名称', extra:{ buttons:[ {text:'新增',type:'primary',click:()=>this.delete('新增')}, {text:'链接',type:'default',link:'upload'}, {text:'返回',type:'default',link:'back'}, {text:'删除',danger:true,link:'drop',click:()=>this.delete('删除')}, {text:'删除',danger:true,diabled:true,link:'drop',}, ], type:'button' } } ngOnInit(): void { this.options.tabs= { size: 'large', values: [ { title: '分类1', component: this.content1 }, { title: '分类2', component: this.content2 }, { title: '分类3', component: this.content3 }, ] } } delete(item) { console.log(item + \"按钮\"); } } Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-15 14:18:15 "},"gitbook/components/loading.html":{"url":"gitbook/components/loading.html","title":"az-loading 加载中...","keywords":"","body":"az-loading 加载中... 如何使用 Primary Api 参数 说明 类型 默认值 [type] 动画的类型 AZLoadingType - [loading] 是否加载中 boolean false [color] 动画的背景色 string - [size] 动画的大小 AZLoadingSize （'small' / 'large' / 'default'） - AZLoadingType 参数 'ball-pulse' 'ball-grid-pulse' 'ball-clip-rotate' 'ball-clip-rotate-pulse' 'square-spin' 'ball-clip-rotate-multiple' 'ball-pulse-rise' 'ball-rotate' 'cube-transition' 'ball-zig-zag' 'ball-zig-zag-deflect' 'ball-triangle-path' 'ball-scale' 'line-scale' 'line-scale-party' 'ball-scale-multiple' 'ball-pulse-sync' 'ball-beat' 'line-scale-pulse-out' 'line-scale-pulse-out-rapid' 'ball-scale-ripple' 'ball-scale-ripple-multiple' 'ball-spin-fade-loader' 'line-spin-fade-loader' 'triangle-skew-spin' 'pacman' 'ball-grid-beat' 'semi-circle-spin' Copyright © zoe 2020 all right reserved，powered by Gitbook修订时间： 2020-07-17 11:11:22 "}}